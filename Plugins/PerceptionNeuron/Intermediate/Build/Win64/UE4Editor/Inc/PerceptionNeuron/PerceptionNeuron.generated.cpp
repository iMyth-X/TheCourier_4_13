// Copyright 1998-2016 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "Private/PerceptionNeuronPrivatePCH.h"
#include "PerceptionNeuron.generated.dep.h"
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCode1PerceptionNeuron() {}
	void APerceptionNeuronController::StaticRegisterNativesAPerceptionNeuronController()
	{
	}
	IMPLEMENT_CLASS(APerceptionNeuronController, 3516060365);
static class UEnum* EPerceptionNeuronBonesEnum_StaticEnum()
{
	extern PERCEPTIONNEURON_API class UPackage* Z_Construct_UPackage__Script_PerceptionNeuron();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern PERCEPTIONNEURON_API class UEnum* Z_Construct_UEnum_PerceptionNeuron_EPerceptionNeuronBonesEnum();
		Singleton = GetStaticEnum(Z_Construct_UEnum_PerceptionNeuron_EPerceptionNeuronBonesEnum, Z_Construct_UPackage__Script_PerceptionNeuron(), TEXT("EPerceptionNeuronBonesEnum"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EPerceptionNeuronBonesEnum(EPerceptionNeuronBonesEnum_StaticEnum, TEXT("/Script/PerceptionNeuron"), TEXT("EPerceptionNeuronBonesEnum"), false, nullptr, nullptr);
static class UEnum* ENeuronChannelNumberEnum_StaticEnum()
{
	extern PERCEPTIONNEURON_API class UPackage* Z_Construct_UPackage__Script_PerceptionNeuron();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern PERCEPTIONNEURON_API class UEnum* Z_Construct_UEnum_PerceptionNeuron_ENeuronChannelNumberEnum();
		Singleton = GetStaticEnum(Z_Construct_UEnum_PerceptionNeuron_ENeuronChannelNumberEnum, Z_Construct_UPackage__Script_PerceptionNeuron(), TEXT("ENeuronChannelNumberEnum"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ENeuronChannelNumberEnum(ENeuronChannelNumberEnum_StaticEnum, TEXT("/Script/PerceptionNeuron"), TEXT("ENeuronChannelNumberEnum"), false, nullptr, nullptr);
static class UEnum* ENeuronRotOrderEnum_StaticEnum()
{
	extern PERCEPTIONNEURON_API class UPackage* Z_Construct_UPackage__Script_PerceptionNeuron();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern PERCEPTIONNEURON_API class UEnum* Z_Construct_UEnum_PerceptionNeuron_ENeuronRotOrderEnum();
		Singleton = GetStaticEnum(Z_Construct_UEnum_PerceptionNeuron_ENeuronRotOrderEnum, Z_Construct_UPackage__Script_PerceptionNeuron(), TEXT("ENeuronRotOrderEnum"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ENeuronRotOrderEnum(ENeuronRotOrderEnum_StaticEnum, TEXT("/Script/PerceptionNeuron"), TEXT("ENeuronRotOrderEnum"), false, nullptr, nullptr);
static class UEnum* ENeuronXYZEnum_StaticEnum()
{
	extern PERCEPTIONNEURON_API class UPackage* Z_Construct_UPackage__Script_PerceptionNeuron();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern PERCEPTIONNEURON_API class UEnum* Z_Construct_UEnum_PerceptionNeuron_ENeuronXYZEnum();
		Singleton = GetStaticEnum(Z_Construct_UEnum_PerceptionNeuron_ENeuronXYZEnum, Z_Construct_UPackage__Script_PerceptionNeuron(), TEXT("ENeuronXYZEnum"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ENeuronXYZEnum(ENeuronXYZEnum_StaticEnum, TEXT("/Script/PerceptionNeuron"), TEXT("ENeuronXYZEnum"), false, nullptr, nullptr);
static class UEnum* ENeuronMotionLineFormatEnum_StaticEnum()
{
	extern PERCEPTIONNEURON_API class UPackage* Z_Construct_UPackage__Script_PerceptionNeuron();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern PERCEPTIONNEURON_API class UEnum* Z_Construct_UEnum_PerceptionNeuron_ENeuronMotionLineFormatEnum();
		Singleton = GetStaticEnum(Z_Construct_UEnum_PerceptionNeuron_ENeuronMotionLineFormatEnum, Z_Construct_UPackage__Script_PerceptionNeuron(), TEXT("ENeuronMotionLineFormatEnum"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ENeuronMotionLineFormatEnum(ENeuronMotionLineFormatEnum_StaticEnum, TEXT("/Script/PerceptionNeuron"), TEXT("ENeuronMotionLineFormatEnum"), false, nullptr, nullptr);
static class UEnum* ENeuronSkeletonEnum_StaticEnum()
{
	extern PERCEPTIONNEURON_API class UPackage* Z_Construct_UPackage__Script_PerceptionNeuron();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern PERCEPTIONNEURON_API class UEnum* Z_Construct_UEnum_PerceptionNeuron_ENeuronSkeletonEnum();
		Singleton = GetStaticEnum(Z_Construct_UEnum_PerceptionNeuron_ENeuronSkeletonEnum, Z_Construct_UPackage__Script_PerceptionNeuron(), TEXT("ENeuronSkeletonEnum"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ENeuronSkeletonEnum(ENeuronSkeletonEnum_StaticEnum, TEXT("/Script/PerceptionNeuron"), TEXT("ENeuronSkeletonEnum"), false, nullptr, nullptr);
class UScriptStruct* FPerceptionNeuronBoneMapStruct::StaticStruct()
{
	extern PERCEPTIONNEURON_API class UPackage* Z_Construct_UPackage__Script_PerceptionNeuron();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern PERCEPTIONNEURON_API class UScriptStruct* Z_Construct_UScriptStruct_FPerceptionNeuronBoneMapStruct();
		extern PERCEPTIONNEURON_API uint32 Get_Z_Construct_UScriptStruct_FPerceptionNeuronBoneMapStruct_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FPerceptionNeuronBoneMapStruct, Z_Construct_UPackage__Script_PerceptionNeuron(), TEXT("PerceptionNeuronBoneMapStruct"), sizeof(FPerceptionNeuronBoneMapStruct), Get_Z_Construct_UScriptStruct_FPerceptionNeuronBoneMapStruct_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FPerceptionNeuronBoneMapStruct(FPerceptionNeuronBoneMapStruct::StaticStruct, TEXT("/Script/PerceptionNeuron"), TEXT("PerceptionNeuronBoneMapStruct"), false, nullptr, nullptr);
static struct FScriptStruct_PerceptionNeuron_StaticRegisterNativesFPerceptionNeuronBoneMapStruct
{
	FScriptStruct_PerceptionNeuron_StaticRegisterNativesFPerceptionNeuronBoneMapStruct()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("PerceptionNeuronBoneMapStruct")),new UScriptStruct::TCppStructOps<FPerceptionNeuronBoneMapStruct>);
	}
} ScriptStruct_PerceptionNeuron_StaticRegisterNativesFPerceptionNeuronBoneMapStruct;
	void UPerceptionNeuronBPLibrary::StaticRegisterNativesUPerceptionNeuronBPLibrary()
	{
		FNativeFunctionRegistrar::RegisterFunction(UPerceptionNeuronBPLibrary::StaticClass(), "NeuronBoneMap",(Native)&UPerceptionNeuronBPLibrary::execNeuronBoneMap);
		FNativeFunctionRegistrar::RegisterFunction(UPerceptionNeuronBPLibrary::StaticClass(), "NeuronBoneSetOffset",(Native)&UPerceptionNeuronBPLibrary::execNeuronBoneSetOffset);
		FNativeFunctionRegistrar::RegisterFunction(UPerceptionNeuronBPLibrary::StaticClass(), "NeuronConnect",(Native)&UPerceptionNeuronBPLibrary::execNeuronConnect);
		FNativeFunctionRegistrar::RegisterFunction(UPerceptionNeuronBPLibrary::StaticClass(), "NeuronDisconnect",(Native)&UPerceptionNeuronBPLibrary::execNeuronDisconnect);
		FNativeFunctionRegistrar::RegisterFunction(UPerceptionNeuronBPLibrary::StaticClass(), "NeuronGetBVHBoneIndex",(Native)&UPerceptionNeuronBPLibrary::execNeuronGetBVHBoneIndex);
		FNativeFunctionRegistrar::RegisterFunction(UPerceptionNeuronBPLibrary::StaticClass(), "NeuronGetLocalBoneLocation",(Native)&UPerceptionNeuronBPLibrary::execNeuronGetLocalBoneLocation);
		FNativeFunctionRegistrar::RegisterFunction(UPerceptionNeuronBPLibrary::StaticClass(), "NeuronGetLocalBoneRotation",(Native)&UPerceptionNeuronBPLibrary::execNeuronGetLocalBoneRotation);
		FNativeFunctionRegistrar::RegisterFunction(UPerceptionNeuronBPLibrary::StaticClass(), "NeuronGetReferencePoseLocalBoneRotation",(Native)&UPerceptionNeuronBPLibrary::execNeuronGetReferencePoseLocalBoneRotation);
		FNativeFunctionRegistrar::RegisterFunction(UPerceptionNeuronBPLibrary::StaticClass(), "NeuronInit",(Native)&UPerceptionNeuronBPLibrary::execNeuronInit);
		FNativeFunctionRegistrar::RegisterFunction(UPerceptionNeuronBPLibrary::StaticClass(), "NeuronInitFile",(Native)&UPerceptionNeuronBPLibrary::execNeuronInitFile);
		FNativeFunctionRegistrar::RegisterFunction(UPerceptionNeuronBPLibrary::StaticClass(), "NeuronNegateRotation",(Native)&UPerceptionNeuronBPLibrary::execNeuronNegateRotation);
		FNativeFunctionRegistrar::RegisterFunction(UPerceptionNeuronBPLibrary::StaticClass(), "NeuronPause",(Native)&UPerceptionNeuronBPLibrary::execNeuronPause);
		FNativeFunctionRegistrar::RegisterFunction(UPerceptionNeuronBPLibrary::StaticClass(), "NeuronPlay",(Native)&UPerceptionNeuronBPLibrary::execNeuronPlay);
		FNativeFunctionRegistrar::RegisterFunction(UPerceptionNeuronBPLibrary::StaticClass(), "NeuronRead",(Native)&UPerceptionNeuronBPLibrary::execNeuronRead);
		FNativeFunctionRegistrar::RegisterFunction(UPerceptionNeuronBPLibrary::StaticClass(), "NeuronReadArray",(Native)&UPerceptionNeuronBPLibrary::execNeuronReadArray);
		FNativeFunctionRegistrar::RegisterFunction(UPerceptionNeuronBPLibrary::StaticClass(), "NeuronReadMotion",(Native)&UPerceptionNeuronBPLibrary::execNeuronReadMotion);
		FNativeFunctionRegistrar::RegisterFunction(UPerceptionNeuronBPLibrary::StaticClass(), "NeuronReadMotionArray",(Native)&UPerceptionNeuronBPLibrary::execNeuronReadMotionArray);
		FNativeFunctionRegistrar::RegisterFunction(UPerceptionNeuronBPLibrary::StaticClass(), "NeuronRewind",(Native)&UPerceptionNeuronBPLibrary::execNeuronRewind);
	}
	IMPLEMENT_CLASS(UPerceptionNeuronBPLibrary, 1505069488);
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	ENGINE_API class UClass* Z_Construct_UClass_AActor();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector();
	ENGINE_API class UClass* Z_Construct_UClass_USkeletalMeshComponent_NoRegister();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FRotator();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintFunctionLibrary();

	PERCEPTIONNEURON_API class UClass* Z_Construct_UClass_APerceptionNeuronController_NoRegister();
	PERCEPTIONNEURON_API class UClass* Z_Construct_UClass_APerceptionNeuronController();
	PERCEPTIONNEURON_API class UEnum* Z_Construct_UEnum_PerceptionNeuron_EPerceptionNeuronBonesEnum();
	PERCEPTIONNEURON_API class UEnum* Z_Construct_UEnum_PerceptionNeuron_ENeuronChannelNumberEnum();
	PERCEPTIONNEURON_API class UEnum* Z_Construct_UEnum_PerceptionNeuron_ENeuronRotOrderEnum();
	PERCEPTIONNEURON_API class UEnum* Z_Construct_UEnum_PerceptionNeuron_ENeuronXYZEnum();
	PERCEPTIONNEURON_API class UEnum* Z_Construct_UEnum_PerceptionNeuron_ENeuronMotionLineFormatEnum();
	PERCEPTIONNEURON_API class UEnum* Z_Construct_UEnum_PerceptionNeuron_ENeuronSkeletonEnum();
	PERCEPTIONNEURON_API class UScriptStruct* Z_Construct_UScriptStruct_FPerceptionNeuronBoneMapStruct();
	PERCEPTIONNEURON_API class UFunction* Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronBoneMap();
	PERCEPTIONNEURON_API class UFunction* Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronBoneSetOffset();
	PERCEPTIONNEURON_API class UFunction* Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronConnect();
	PERCEPTIONNEURON_API class UFunction* Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronDisconnect();
	PERCEPTIONNEURON_API class UFunction* Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronGetBVHBoneIndex();
	PERCEPTIONNEURON_API class UFunction* Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronGetLocalBoneLocation();
	PERCEPTIONNEURON_API class UFunction* Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronGetLocalBoneRotation();
	PERCEPTIONNEURON_API class UFunction* Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronGetReferencePoseLocalBoneRotation();
	PERCEPTIONNEURON_API class UFunction* Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronInit();
	PERCEPTIONNEURON_API class UFunction* Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronInitFile();
	PERCEPTIONNEURON_API class UFunction* Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronNegateRotation();
	PERCEPTIONNEURON_API class UFunction* Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronPause();
	PERCEPTIONNEURON_API class UFunction* Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronPlay();
	PERCEPTIONNEURON_API class UFunction* Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronRead();
	PERCEPTIONNEURON_API class UFunction* Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronReadArray();
	PERCEPTIONNEURON_API class UFunction* Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronReadMotion();
	PERCEPTIONNEURON_API class UFunction* Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronReadMotionArray();
	PERCEPTIONNEURON_API class UFunction* Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronRewind();
	PERCEPTIONNEURON_API class UClass* Z_Construct_UClass_UPerceptionNeuronBPLibrary_NoRegister();
	PERCEPTIONNEURON_API class UClass* Z_Construct_UClass_UPerceptionNeuronBPLibrary();
	PERCEPTIONNEURON_API class UPackage* Z_Construct_UPackage__Script_PerceptionNeuron();
	UClass* Z_Construct_UClass_APerceptionNeuronController_NoRegister()
	{
		return APerceptionNeuronController::StaticClass();
	}
	UClass* Z_Construct_UClass_APerceptionNeuronController()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AActor();
			Z_Construct_UPackage__Script_PerceptionNeuron();
			OuterClass = APerceptionNeuronController::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20800080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("PerceptionNeuronController.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/PerceptionNeuronController.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_APerceptionNeuronController(Z_Construct_UClass_APerceptionNeuronController, &APerceptionNeuronController::StaticClass, TEXT("APerceptionNeuronController"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(APerceptionNeuronController);
	UEnum* Z_Construct_UEnum_PerceptionNeuron_EPerceptionNeuronBonesEnum()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_PerceptionNeuron();
		extern uint32 Get_Z_Construct_UEnum_PerceptionNeuron_EPerceptionNeuronBonesEnum_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EPerceptionNeuronBonesEnum"), 0, Get_Z_Construct_UEnum_PerceptionNeuron_EPerceptionNeuronBonesEnum_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EPerceptionNeuronBonesEnum"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPerceptionNeuronBonesEnum::VE_Hips")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPerceptionNeuronBonesEnum::VE_RightUpLeg")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPerceptionNeuronBonesEnum::VE_RightLeg")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPerceptionNeuronBonesEnum::VE_RightFoot")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPerceptionNeuronBonesEnum::VE_LeftUpLeg")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPerceptionNeuronBonesEnum::VE_LeftLeg")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPerceptionNeuronBonesEnum::VE_LeftFoot")), 6));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPerceptionNeuronBonesEnum::VE_Spine")), 7));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPerceptionNeuronBonesEnum::VE_Spine1")), 8));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPerceptionNeuronBonesEnum::VE_Spine2")), 9));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPerceptionNeuronBonesEnum::VE_Spine3")), 10));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPerceptionNeuronBonesEnum::VE_Neck")), 11));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPerceptionNeuronBonesEnum::VE_Head")), 12));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPerceptionNeuronBonesEnum::VE_RightShoulder")), 13));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPerceptionNeuronBonesEnum::VE_RightArm")), 14));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPerceptionNeuronBonesEnum::VE_RightForeArm")), 15));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPerceptionNeuronBonesEnum::VE_RightHand")), 16));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPerceptionNeuronBonesEnum::VE_RightHandThumb1")), 17));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPerceptionNeuronBonesEnum::VE_RightHandThumb2")), 18));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPerceptionNeuronBonesEnum::VE_RightHandThumb3")), 19));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPerceptionNeuronBonesEnum::VE_RightInHandIndex")), 20));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPerceptionNeuronBonesEnum::VE_RightHandIndex1")), 21));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPerceptionNeuronBonesEnum::VE_RightHandIndex2")), 22));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPerceptionNeuronBonesEnum::VE_RightHandIndex3")), 23));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPerceptionNeuronBonesEnum::VE_RightInHandMiddle")), 24));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPerceptionNeuronBonesEnum::VE_RightHandMiddle1")), 25));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPerceptionNeuronBonesEnum::VE_RightHandMiddle2")), 26));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPerceptionNeuronBonesEnum::VE_RightHandMiddle3")), 27));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPerceptionNeuronBonesEnum::VE_RightInHandRing")), 28));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPerceptionNeuronBonesEnum::VE_RightHandRing1")), 29));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPerceptionNeuronBonesEnum::VE_RightHandRing2")), 30));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPerceptionNeuronBonesEnum::VE_RightHandRing3")), 31));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPerceptionNeuronBonesEnum::VE_RightInHandPinky")), 32));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPerceptionNeuronBonesEnum::VE_RightHandPinky1")), 33));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPerceptionNeuronBonesEnum::VE_RightHandPinky2")), 34));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPerceptionNeuronBonesEnum::VE_RightHandPinky3")), 35));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPerceptionNeuronBonesEnum::VE_LeftShoulder")), 36));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPerceptionNeuronBonesEnum::VE_LeftArm")), 37));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPerceptionNeuronBonesEnum::VE_LeftForeArm")), 38));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPerceptionNeuronBonesEnum::VE_LeftHand")), 39));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPerceptionNeuronBonesEnum::VE_LeftHandThumb1")), 40));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPerceptionNeuronBonesEnum::VE_LeftHandThumb2")), 41));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPerceptionNeuronBonesEnum::VE_LeftHandThumb3")), 42));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPerceptionNeuronBonesEnum::VE_LeftInHandIndex")), 43));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPerceptionNeuronBonesEnum::VE_LeftHandIndex1")), 44));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPerceptionNeuronBonesEnum::VE_LeftHandIndex2")), 45));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPerceptionNeuronBonesEnum::VE_LeftHandIndex3")), 46));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPerceptionNeuronBonesEnum::VE_LeftInHandMiddle")), 47));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPerceptionNeuronBonesEnum::VE_LeftHandMiddle1")), 48));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPerceptionNeuronBonesEnum::VE_LeftHandMiddle2")), 49));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPerceptionNeuronBonesEnum::VE_LeftHandMiddle3")), 50));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPerceptionNeuronBonesEnum::VE_LeftInHandRing")), 51));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPerceptionNeuronBonesEnum::VE_LeftHandRing1")), 52));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPerceptionNeuronBonesEnum::VE_LeftHandRing2")), 53));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPerceptionNeuronBonesEnum::VE_LeftHandRing3")), 54));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPerceptionNeuronBonesEnum::VE_LeftInHandPinky")), 55));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPerceptionNeuronBonesEnum::VE_LeftHandPinky1")), 56));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPerceptionNeuronBonesEnum::VE_LeftHandPinky2")), 57));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPerceptionNeuronBonesEnum::VE_LeftHandPinky3")), 58));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPerceptionNeuronBonesEnum::VE_MAX")), 59));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("EPerceptionNeuronBonesEnum");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/PerceptionNeuronBPLibrary.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Bones delivered in the Perception Neuron live stream"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_Head.DisplayName"), TEXT("Head"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_Hips.DisplayName"), TEXT("Hips"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_LeftArm.DisplayName"), TEXT("LeftArm"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_LeftFoot.DisplayName"), TEXT("LeftFoot"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_LeftForeArm.DisplayName"), TEXT("LeftForeArm"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_LeftHand.DisplayName"), TEXT("LeftHand"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_LeftHandIndex1.DisplayName"), TEXT("LeftHandIndex1"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_LeftHandIndex2.DisplayName"), TEXT("LeftHandIndex2"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_LeftHandIndex3.DisplayName"), TEXT("LeftHandIndex3"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_LeftHandMiddle1.DisplayName"), TEXT("LeftHandMiddle1"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_LeftHandMiddle2.DisplayName"), TEXT("LeftHandMiddle2"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_LeftHandMiddle3.DisplayName"), TEXT("LeftHandMiddle3"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_LeftHandPinky1.DisplayName"), TEXT("LeftHandPinky1"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_LeftHandPinky2.DisplayName"), TEXT("LeftHandPinky2"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_LeftHandPinky3.DisplayName"), TEXT("LeftHandPinky3"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_LeftHandRing1.DisplayName"), TEXT("LeftHandRing1"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_LeftHandRing2.DisplayName"), TEXT("LeftHandRing2"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_LeftHandRing3.DisplayName"), TEXT("LeftHandRing3"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_LeftHandThumb1.DisplayName"), TEXT("LeftHandThumb1"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_LeftHandThumb2.DisplayName"), TEXT("LeftHandThumb2"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_LeftHandThumb3.DisplayName"), TEXT("LeftHandThumb3"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_LeftInHandIndex.DisplayName"), TEXT("LeftInHandIndex"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_LeftInHandMiddle.DisplayName"), TEXT("LeftInHandMiddle"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_LeftInHandPinky.DisplayName"), TEXT("LeftInHandPinky"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_LeftInHandRing.DisplayName"), TEXT("LeftInHandRing"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_LeftLeg.DisplayName"), TEXT("LeftLeg"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_LeftShoulder.DisplayName"), TEXT("LeftShoulder"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_LeftUpLeg.DisplayName"), TEXT("LeftUpLeg"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_Neck.DisplayName"), TEXT("Neck"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_RightArm.DisplayName"), TEXT("RightArm"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_RightFoot.DisplayName"), TEXT("RightFoot"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_RightForeArm.DisplayName"), TEXT("RightForeArm"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_RightHand.DisplayName"), TEXT("RightHand"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_RightHandIndex1.DisplayName"), TEXT("RightHandIndex1"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_RightHandIndex2.DisplayName"), TEXT("RightHandIndex2"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_RightHandIndex3.DisplayName"), TEXT("RightHandIndex3"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_RightHandMiddle1.DisplayName"), TEXT("RightHandMiddle1"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_RightHandMiddle2.DisplayName"), TEXT("RightHandMiddle2"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_RightHandMiddle3.DisplayName"), TEXT("RightHandMiddle3"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_RightHandPinky1.DisplayName"), TEXT("RightHandPinky1"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_RightHandPinky2.DisplayName"), TEXT("RightHandPinky2"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_RightHandPinky3.DisplayName"), TEXT("RightHandPinky3"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_RightHandRing1.DisplayName"), TEXT("RightHandRing1"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_RightHandRing2.DisplayName"), TEXT("RightHandRing2"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_RightHandRing3.DisplayName"), TEXT("RightHandRing3"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_RightHandThumb1.DisplayName"), TEXT("RightHandThumb1"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_RightHandThumb2.DisplayName"), TEXT("RightHandThumb2"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_RightHandThumb3.DisplayName"), TEXT("RightHandThumb3"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_RightInHandIndex.DisplayName"), TEXT("RightInHandIndex"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_RightInHandMiddle.DisplayName"), TEXT("RightInHandMiddle"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_RightInHandPinky.DisplayName"), TEXT("RightInHandPinky"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_RightInHandRing.DisplayName"), TEXT("RightInHandRing"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_RightLeg.DisplayName"), TEXT("RightLeg"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_RightShoulder.DisplayName"), TEXT("RightShoulder"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_RightUpLeg.DisplayName"), TEXT("RightUpLeg"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_Spine.DisplayName"), TEXT("Spine"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_Spine1.DisplayName"), TEXT("Spine1"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_Spine2.DisplayName"), TEXT("Spine2"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_Spine3.DisplayName"), TEXT("Spine3"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_PerceptionNeuron_EPerceptionNeuronBonesEnum_CRC() { return 1841458587U; }
	UEnum* Z_Construct_UEnum_PerceptionNeuron_ENeuronChannelNumberEnum()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_PerceptionNeuron();
		extern uint32 Get_Z_Construct_UEnum_PerceptionNeuron_ENeuronChannelNumberEnum_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("ENeuronChannelNumberEnum"), 0, Get_Z_Construct_UEnum_PerceptionNeuron_ENeuronChannelNumberEnum_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ENeuronChannelNumberEnum"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ENeuronChannelNumberEnum::VE_0")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ENeuronChannelNumberEnum::VE_1")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ENeuronChannelNumberEnum::VE_2")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ENeuronChannelNumberEnum::VE_3")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ENeuronChannelNumberEnum::VE_4")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ENeuronChannelNumberEnum::VE_5")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ENeuronChannelNumberEnum::VE_MAX")), 6));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("ENeuronChannelNumberEnum");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/PerceptionNeuronBPLibrary.h"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_0.DisplayName"), TEXT("0"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_1.DisplayName"), TEXT("1"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_2.DisplayName"), TEXT("2"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_3.DisplayName"), TEXT("3"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_4.DisplayName"), TEXT("4"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_5.DisplayName"), TEXT("5"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_PerceptionNeuron_ENeuronChannelNumberEnum_CRC() { return 1000761996U; }
	UEnum* Z_Construct_UEnum_PerceptionNeuron_ENeuronRotOrderEnum()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_PerceptionNeuron();
		extern uint32 Get_Z_Construct_UEnum_PerceptionNeuron_ENeuronRotOrderEnum_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("ENeuronRotOrderEnum"), 0, Get_Z_Construct_UEnum_PerceptionNeuron_ENeuronRotOrderEnum_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ENeuronRotOrderEnum"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ENeuronRotOrderEnum::VE_XYZ")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ENeuronRotOrderEnum::VE_XZY")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ENeuronRotOrderEnum::VE_YXZ")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ENeuronRotOrderEnum::VE_YZX")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ENeuronRotOrderEnum::VE_ZXY")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ENeuronRotOrderEnum::VE_ZYX")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ENeuronRotOrderEnum::VE_MAX")), 6));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("ENeuronRotOrderEnum");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/PerceptionNeuronBPLibrary.h"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_XYZ.DisplayName"), TEXT("XYZ"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_XZY.DisplayName"), TEXT("XZY"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_YXZ.DisplayName"), TEXT("YXZ"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_YZX.DisplayName"), TEXT("YZX"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_ZXY.DisplayName"), TEXT("ZXY"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_ZYX.DisplayName"), TEXT("ZYX"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_PerceptionNeuron_ENeuronRotOrderEnum_CRC() { return 1541535451U; }
	UEnum* Z_Construct_UEnum_PerceptionNeuron_ENeuronXYZEnum()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_PerceptionNeuron();
		extern uint32 Get_Z_Construct_UEnum_PerceptionNeuron_ENeuronXYZEnum_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("ENeuronXYZEnum"), 0, Get_Z_Construct_UEnum_PerceptionNeuron_ENeuronXYZEnum_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ENeuronXYZEnum"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ENeuronXYZEnum::VE_X")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ENeuronXYZEnum::VE_Y")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ENeuronXYZEnum::VE_Z")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ENeuronXYZEnum::VE_NX")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ENeuronXYZEnum::VE_NY")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ENeuronXYZEnum::VE_NZ")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ENeuronXYZEnum::VE_MAX")), 6));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("ENeuronXYZEnum");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/PerceptionNeuronBPLibrary.h"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_NX.DisplayName"), TEXT("-X"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_NY.DisplayName"), TEXT("-Y"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_NZ.DisplayName"), TEXT("-Z"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_X.DisplayName"), TEXT("X"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_Y.DisplayName"), TEXT("Y"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_Z.DisplayName"), TEXT("Z"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_PerceptionNeuron_ENeuronXYZEnum_CRC() { return 107831593U; }
	UEnum* Z_Construct_UEnum_PerceptionNeuron_ENeuronMotionLineFormatEnum()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_PerceptionNeuron();
		extern uint32 Get_Z_Construct_UEnum_PerceptionNeuron_ENeuronMotionLineFormatEnum_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("ENeuronMotionLineFormatEnum"), 0, Get_Z_Construct_UEnum_PerceptionNeuron_ENeuronMotionLineFormatEnum_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ENeuronMotionLineFormatEnum"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ENeuronMotionLineFormatEnum::VE_Standard")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ENeuronMotionLineFormatEnum::VE_Neuron")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ENeuronMotionLineFormatEnum::VE_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("ENeuronMotionLineFormatEnum");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/PerceptionNeuronBPLibrary.h"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_Neuron.DisplayName"), TEXT("Neuron"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_Neuron.ToolTip"), TEXT("Axis Neuron BVH live format (with character name at beginning and || at line ending)."));
			MetaData->SetValue(ReturnEnum, TEXT("VE_Standard.DisplayName"), TEXT("Standard"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_Standard.ToolTip"), TEXT("BVH Standard format (only the float numbers and a CR or LF at line ending)."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_PerceptionNeuron_ENeuronMotionLineFormatEnum_CRC() { return 530534061U; }
	UEnum* Z_Construct_UEnum_PerceptionNeuron_ENeuronSkeletonEnum()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_PerceptionNeuron();
		extern uint32 Get_Z_Construct_UEnum_PerceptionNeuron_ENeuronSkeletonEnum_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("ENeuronSkeletonEnum"), 0, Get_Z_Construct_UEnum_PerceptionNeuron_ENeuronSkeletonEnum_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ENeuronSkeletonEnum"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ENeuronSkeletonEnum::VE_None")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ENeuronSkeletonEnum::VE_Neuron")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ENeuronSkeletonEnum::VE_TPP_Hero")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ENeuronSkeletonEnum::VE_Mannequin")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ENeuronSkeletonEnum::VE_Map")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ENeuronSkeletonEnum::VE_UE4")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ENeuronSkeletonEnum::VE_MAX")), 6));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("ENeuronSkeletonEnum");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/PerceptionNeuronBPLibrary.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("*      Function library class.\n*      Each function in it is expected to be static and represents blueprint node that can be called in any blueprint.\n*\n*      When declaring function you can define metadata for the node. Key function specifiers will be BlueprintPure and BlueprintCallable.\n*      BlueprintPure - means the function does not affect the owning object in any way and thus creates a node without Exec pins.\n*      BlueprintCallable - makes a function which can be executed in Blueprints - Thus it has Exec pins.\n*      DisplayName - full name of the node, shown when you mouse over the node and in the blueprint drop down menu.\n*                              Its lets you name the node using characters not allowed in C++ function names.\n*      CompactNodeTitle - the word(s) that appear on the node.\n*      Keywords -      the list of keywords that helps you to find node when you search for it using Blueprint drop-down menu.\n*                              Good example is \"Print String\" node which you can find also by using keyword \"log\".\n*      Category -      the category your node will be under in the Blueprint drop-down menu.\n*\n*      For more info on custom blueprint nodes visit documentation:\n*      https://wiki.unrealengine.com/Custom_Blueprint_Node_Creation\n// Deprecated"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_Mannequin.DisplayName"), TEXT("Mannequin"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_Mannequin.ToolTip"), TEXT("Get Mannequin skeleton coordinates. New grey Unreal default skeleton with A-Pose."));
			MetaData->SetValue(ReturnEnum, TEXT("VE_Map.DisplayName"), TEXT("Map"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_Map.ToolTip"), TEXT("Get custom skeleton coordinates with configured bone map."));
			MetaData->SetValue(ReturnEnum, TEXT("VE_Neuron.DisplayName"), TEXT("Neuron"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_Neuron.ToolTip"), TEXT("Get Neuron BVH skeleton coordinates."));
			MetaData->SetValue(ReturnEnum, TEXT("VE_None.DisplayName"), TEXT("None"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_None.ToolTip"), TEXT("Get BVH coordinates. Use translation and rotation as it is."));
			MetaData->SetValue(ReturnEnum, TEXT("VE_TPP_Hero.DisplayName"), TEXT("TPP_Hero"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_TPP_Hero.ToolTip"), TEXT("Get Hero_TPP skeleton coordinates. Old blue Unreal default skeleton with T-Pose."));
			MetaData->SetValue(ReturnEnum, TEXT("VE_UE4.DisplayName"), TEXT("World"));
			MetaData->SetValue(ReturnEnum, TEXT("VE_UE4.ToolTip"), TEXT("Get UE4 world skeleton coordinates."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_PerceptionNeuron_ENeuronSkeletonEnum_CRC() { return 2371851768U; }
	UScriptStruct* Z_Construct_UScriptStruct_FPerceptionNeuronBoneMapStruct()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_PerceptionNeuron();
		extern uint32 Get_Z_Construct_UScriptStruct_FPerceptionNeuronBoneMapStruct_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("PerceptionNeuronBoneMapStruct"), sizeof(FPerceptionNeuronBoneMapStruct), Get_Z_Construct_UScriptStruct_FPerceptionNeuronBoneMapStruct_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PerceptionNeuronBoneMapStruct"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FPerceptionNeuronBoneMapStruct>, EStructFlags(0x00000001));
			UProperty* NewProp_CustomBoneName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CustomBoneName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(CustomBoneName, FPerceptionNeuronBoneMapStruct), 0x0010000000000005);
			UProperty* NewProp_BVHBone = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BVHBone"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(BVHBone, FPerceptionNeuronBoneMapStruct), 0x0010000000000005, Z_Construct_UEnum_PerceptionNeuron_EPerceptionNeuronBonesEnum());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/PerceptionNeuronBPLibrary.h"));
			MetaData->SetValue(NewProp_CustomBoneName, TEXT("Category"), TEXT("Perception Neuron"));
			MetaData->SetValue(NewProp_CustomBoneName, TEXT("ModuleRelativePath"), TEXT("Public/PerceptionNeuronBPLibrary.h"));
			MetaData->SetValue(NewProp_BVHBone, TEXT("Category"), TEXT("Perception Neuron"));
			MetaData->SetValue(NewProp_BVHBone, TEXT("ModuleRelativePath"), TEXT("Public/PerceptionNeuronBPLibrary.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FPerceptionNeuronBoneMapStruct_CRC() { return 797023792U; }
	UFunction* Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronBoneMap()
	{
		struct PerceptionNeuronBPLibrary_eventNeuronBoneMap_Parms
		{
			APerceptionNeuronController* Controller;
			int32 BoneIndex;
			TEnumAsByte<ENeuronXYZEnum> X;
			TEnumAsByte<ENeuronXYZEnum> Y;
			TEnumAsByte<ENeuronXYZEnum> Z;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPerceptionNeuronBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NeuronBoneMap"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(PerceptionNeuronBPLibrary_eventNeuronBoneMap_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, PerceptionNeuronBPLibrary_eventNeuronBoneMap_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, PerceptionNeuronBPLibrary_eventNeuronBoneMap_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, PerceptionNeuronBPLibrary_eventNeuronBoneMap_Parms), sizeof(bool), true);
			UProperty* NewProp_Z = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Z"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Z, PerceptionNeuronBPLibrary_eventNeuronBoneMap_Parms), 0x0010000000000080, Z_Construct_UEnum_PerceptionNeuron_ENeuronXYZEnum());
			UProperty* NewProp_Y = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Y"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Y, PerceptionNeuronBPLibrary_eventNeuronBoneMap_Parms), 0x0010000000000080, Z_Construct_UEnum_PerceptionNeuron_ENeuronXYZEnum());
			UProperty* NewProp_X = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("X"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(X, PerceptionNeuronBPLibrary_eventNeuronBoneMap_Parms), 0x0010000000000080, Z_Construct_UEnum_PerceptionNeuron_ENeuronXYZEnum());
			UProperty* NewProp_BoneIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BoneIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(BoneIndex, PerceptionNeuronBPLibrary_eventNeuronBoneMap_Parms), 0x0010000000000080);
			UProperty* NewProp_Controller = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Controller"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Controller, PerceptionNeuronBPLibrary_eventNeuronBoneMap_Parms), 0x0010000000000080, Z_Construct_UClass_APerceptionNeuronController_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Perception Neuron"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_X"), TEXT("VE_X"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Y"), TEXT("VE_Y"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Z"), TEXT("VE_Z"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Map Bone Coordinates"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/PerceptionNeuronBPLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Map bone coordinate system manually (Deprecated)."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronBoneSetOffset()
	{
		struct PerceptionNeuronBPLibrary_eventNeuronBoneSetOffset_Parms
		{
			APerceptionNeuronController* Controller;
			int32 BoneIndex;
			float X;
			float Y;
			float Z;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPerceptionNeuronBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NeuronBoneSetOffset"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(PerceptionNeuronBPLibrary_eventNeuronBoneSetOffset_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, PerceptionNeuronBPLibrary_eventNeuronBoneSetOffset_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, PerceptionNeuronBPLibrary_eventNeuronBoneSetOffset_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, PerceptionNeuronBPLibrary_eventNeuronBoneSetOffset_Parms), sizeof(bool), true);
			UProperty* NewProp_Z = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Z"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Z, PerceptionNeuronBPLibrary_eventNeuronBoneSetOffset_Parms), 0x0010000000000080);
			UProperty* NewProp_Y = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Y"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Y, PerceptionNeuronBPLibrary_eventNeuronBoneSetOffset_Parms), 0x0010000000000080);
			UProperty* NewProp_X = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("X"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(X, PerceptionNeuronBPLibrary_eventNeuronBoneSetOffset_Parms), 0x0010000000000080);
			UProperty* NewProp_BoneIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BoneIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(BoneIndex, PerceptionNeuronBPLibrary_eventNeuronBoneSetOffset_Parms), 0x0010000000000080);
			UProperty* NewProp_Controller = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Controller"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Controller, PerceptionNeuronBPLibrary_eventNeuronBoneSetOffset_Parms), 0x0010000000000080, Z_Construct_UClass_APerceptionNeuronController_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Perception Neuron"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_BoneIndex"), TEXT("0"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_X"), TEXT("0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Y"), TEXT("0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Z"), TEXT("0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Bone Set Offset"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/PerceptionNeuronBPLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Configure BVH bone offset. This offset is removed from the incoming translation before coordinate mapping."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronConnect()
	{
		struct PerceptionNeuronBPLibrary_eventNeuronConnect_Parms
		{
			APerceptionNeuronController* Controller;
			FString HostName;
			int32 Port;
			bool bReference;
			bool bDisplacement;
			TEnumAsByte<ENeuronMotionLineFormatEnum> MotionLineFormat;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPerceptionNeuronBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NeuronConnect"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(PerceptionNeuronBPLibrary_eventNeuronConnect_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, PerceptionNeuronBPLibrary_eventNeuronConnect_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, PerceptionNeuronBPLibrary_eventNeuronConnect_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, PerceptionNeuronBPLibrary_eventNeuronConnect_Parms), sizeof(bool), true);
			UProperty* NewProp_MotionLineFormat = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MotionLineFormat"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(MotionLineFormat, PerceptionNeuronBPLibrary_eventNeuronConnect_Parms), 0x0010000000000080, Z_Construct_UEnum_PerceptionNeuron_ENeuronMotionLineFormatEnum());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDisplacement, PerceptionNeuronBPLibrary_eventNeuronConnect_Parms, bool);
			UProperty* NewProp_bDisplacement = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bDisplacement"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDisplacement, PerceptionNeuronBPLibrary_eventNeuronConnect_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bDisplacement, PerceptionNeuronBPLibrary_eventNeuronConnect_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bReference, PerceptionNeuronBPLibrary_eventNeuronConnect_Parms, bool);
			UProperty* NewProp_bReference = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bReference"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bReference, PerceptionNeuronBPLibrary_eventNeuronConnect_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bReference, PerceptionNeuronBPLibrary_eventNeuronConnect_Parms), sizeof(bool), true);
			UProperty* NewProp_Port = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Port"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Port, PerceptionNeuronBPLibrary_eventNeuronConnect_Parms), 0x0010000000000080);
			UProperty* NewProp_HostName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("HostName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(HostName, PerceptionNeuronBPLibrary_eventNeuronConnect_Parms), 0x0010000000000082);
			UProperty* NewProp_Controller = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Controller"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Controller, PerceptionNeuronBPLibrary_eventNeuronConnect_Parms), 0x0010000000000080, Z_Construct_UClass_APerceptionNeuronController_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Perception Neuron"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bDisplacement"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bReference"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_HostName"), TEXT("127.0.0.1"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_MotionLineFormat"), TEXT("VE_Neuron"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Port"), TEXT("7001"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Connect Neuron"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/PerceptionNeuronBPLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Connect to Axis Neuron Playser."));
			MetaData->SetValue(NewProp_HostName, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronDisconnect()
	{
		struct PerceptionNeuronBPLibrary_eventNeuronDisconnect_Parms
		{
			APerceptionNeuronController* Controller;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPerceptionNeuronBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NeuronDisconnect"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(PerceptionNeuronBPLibrary_eventNeuronDisconnect_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, PerceptionNeuronBPLibrary_eventNeuronDisconnect_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, PerceptionNeuronBPLibrary_eventNeuronDisconnect_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, PerceptionNeuronBPLibrary_eventNeuronDisconnect_Parms), sizeof(bool), true);
			UProperty* NewProp_Controller = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Controller"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Controller, PerceptionNeuronBPLibrary_eventNeuronDisconnect_Parms), 0x0010000000000080, Z_Construct_UClass_APerceptionNeuronController_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Perception Neuron"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Disconnect Neuron"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/PerceptionNeuronBPLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Disconnect from Axis Neuron Player."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronGetBVHBoneIndex()
	{
		struct PerceptionNeuronBPLibrary_eventNeuronGetBVHBoneIndex_Parms
		{
			TEnumAsByte<EPerceptionNeuronBonesEnum> BVHBone;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPerceptionNeuronBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NeuronGetBVHBoneIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(PerceptionNeuronBPLibrary_eventNeuronGetBVHBoneIndex_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, PerceptionNeuronBPLibrary_eventNeuronGetBVHBoneIndex_Parms), 0x0010000000000580);
			UProperty* NewProp_BVHBone = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BVHBone"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(BVHBone, PerceptionNeuronBPLibrary_eventNeuronGetBVHBoneIndex_Parms), 0x0010000000000080, Z_Construct_UEnum_PerceptionNeuron_EPerceptionNeuronBonesEnum());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Perception Neuron"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("Index"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_BVHBone"), TEXT("VE_Hips"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Get BVH Bone Index"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/PerceptionNeuronBPLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Return BVH Bone Index from Enum."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronGetLocalBoneLocation()
	{
		struct PerceptionNeuronBPLibrary_eventNeuronGetLocalBoneLocation_Parms
		{
			USkeletalMeshComponent* Mesh;
			FVector Location;
			int32 BoneIndex;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPerceptionNeuronBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NeuronGetLocalBoneLocation"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(PerceptionNeuronBPLibrary_eventNeuronGetLocalBoneLocation_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, PerceptionNeuronBPLibrary_eventNeuronGetLocalBoneLocation_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, PerceptionNeuronBPLibrary_eventNeuronGetLocalBoneLocation_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, PerceptionNeuronBPLibrary_eventNeuronGetLocalBoneLocation_Parms), sizeof(bool), true);
			UProperty* NewProp_BoneIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BoneIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(BoneIndex, PerceptionNeuronBPLibrary_eventNeuronGetLocalBoneLocation_Parms), 0x0010000000000080);
			UProperty* NewProp_Location = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Location"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Location, PerceptionNeuronBPLibrary_eventNeuronGetLocalBoneLocation_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Mesh = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Mesh"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Mesh, PerceptionNeuronBPLibrary_eventNeuronGetLocalBoneLocation_Parms), 0x0010000000080080, Z_Construct_UClass_USkeletalMeshComponent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Perception Neuron"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_BoneIndex"), TEXT("0"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Get Local Bone Location"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Get local bone location from mesh."));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/PerceptionNeuronBPLibrary.h"));
			MetaData->SetValue(NewProp_Mesh, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronGetLocalBoneRotation()
	{
		struct PerceptionNeuronBPLibrary_eventNeuronGetLocalBoneRotation_Parms
		{
			USkeletalMeshComponent* Mesh;
			FRotator Rotation;
			int32 BoneIndex;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPerceptionNeuronBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NeuronGetLocalBoneRotation"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(PerceptionNeuronBPLibrary_eventNeuronGetLocalBoneRotation_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, PerceptionNeuronBPLibrary_eventNeuronGetLocalBoneRotation_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, PerceptionNeuronBPLibrary_eventNeuronGetLocalBoneRotation_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, PerceptionNeuronBPLibrary_eventNeuronGetLocalBoneRotation_Parms), sizeof(bool), true);
			UProperty* NewProp_BoneIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BoneIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(BoneIndex, PerceptionNeuronBPLibrary_eventNeuronGetLocalBoneRotation_Parms), 0x0010000000000080);
			UProperty* NewProp_Rotation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Rotation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Rotation, PerceptionNeuronBPLibrary_eventNeuronGetLocalBoneRotation_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_Mesh = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Mesh"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Mesh, PerceptionNeuronBPLibrary_eventNeuronGetLocalBoneRotation_Parms), 0x0010000000080080, Z_Construct_UClass_USkeletalMeshComponent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Perception Neuron"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_BoneIndex"), TEXT("0"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Get Local Bone Rotation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/PerceptionNeuronBPLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get local bone rotation from mesh."));
			MetaData->SetValue(NewProp_Mesh, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronGetReferencePoseLocalBoneRotation()
	{
		struct PerceptionNeuronBPLibrary_eventNeuronGetReferencePoseLocalBoneRotation_Parms
		{
			USkeletalMeshComponent* Mesh;
			FRotator Rotation;
			int32 BoneIndex;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPerceptionNeuronBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NeuronGetReferencePoseLocalBoneRotation"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(PerceptionNeuronBPLibrary_eventNeuronGetReferencePoseLocalBoneRotation_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, PerceptionNeuronBPLibrary_eventNeuronGetReferencePoseLocalBoneRotation_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, PerceptionNeuronBPLibrary_eventNeuronGetReferencePoseLocalBoneRotation_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, PerceptionNeuronBPLibrary_eventNeuronGetReferencePoseLocalBoneRotation_Parms), sizeof(bool), true);
			UProperty* NewProp_BoneIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BoneIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(BoneIndex, PerceptionNeuronBPLibrary_eventNeuronGetReferencePoseLocalBoneRotation_Parms), 0x0010000000000080);
			UProperty* NewProp_Rotation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Rotation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Rotation, PerceptionNeuronBPLibrary_eventNeuronGetReferencePoseLocalBoneRotation_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_Mesh = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Mesh"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Mesh, PerceptionNeuronBPLibrary_eventNeuronGetReferencePoseLocalBoneRotation_Parms), 0x0010000000080080, Z_Construct_UClass_USkeletalMeshComponent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Perception Neuron"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_BoneIndex"), TEXT("0"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Get Refpose Local Bone Rotation"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Get local bone rotation from reference pose."));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/PerceptionNeuronBPLibrary.h"));
			MetaData->SetValue(NewProp_Mesh, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronInit()
	{
		struct PerceptionNeuronBPLibrary_eventNeuronInit_Parms
		{
			APerceptionNeuronController* Controller;
			int32 BoneNumber;
			TEnumAsByte<ENeuronRotOrderEnum> RotationOrder;
			TEnumAsByte<ENeuronChannelNumberEnum> XPositionChannel;
			TEnumAsByte<ENeuronChannelNumberEnum> YPositionChannel;
			TEnumAsByte<ENeuronChannelNumberEnum> ZPositionChannel;
			TEnumAsByte<ENeuronChannelNumberEnum> XRotationChannel;
			TEnumAsByte<ENeuronChannelNumberEnum> YRotationChannel;
			TEnumAsByte<ENeuronChannelNumberEnum> ZRotationChannel;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPerceptionNeuronBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NeuronInit"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(PerceptionNeuronBPLibrary_eventNeuronInit_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, PerceptionNeuronBPLibrary_eventNeuronInit_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, PerceptionNeuronBPLibrary_eventNeuronInit_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, PerceptionNeuronBPLibrary_eventNeuronInit_Parms), sizeof(bool), true);
			UProperty* NewProp_ZRotationChannel = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ZRotationChannel"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ZRotationChannel, PerceptionNeuronBPLibrary_eventNeuronInit_Parms), 0x0010000000000080, Z_Construct_UEnum_PerceptionNeuron_ENeuronChannelNumberEnum());
			UProperty* NewProp_YRotationChannel = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("YRotationChannel"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(YRotationChannel, PerceptionNeuronBPLibrary_eventNeuronInit_Parms), 0x0010000000000080, Z_Construct_UEnum_PerceptionNeuron_ENeuronChannelNumberEnum());
			UProperty* NewProp_XRotationChannel = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("XRotationChannel"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(XRotationChannel, PerceptionNeuronBPLibrary_eventNeuronInit_Parms), 0x0010000000000080, Z_Construct_UEnum_PerceptionNeuron_ENeuronChannelNumberEnum());
			UProperty* NewProp_ZPositionChannel = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ZPositionChannel"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ZPositionChannel, PerceptionNeuronBPLibrary_eventNeuronInit_Parms), 0x0010000000000080, Z_Construct_UEnum_PerceptionNeuron_ENeuronChannelNumberEnum());
			UProperty* NewProp_YPositionChannel = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("YPositionChannel"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(YPositionChannel, PerceptionNeuronBPLibrary_eventNeuronInit_Parms), 0x0010000000000080, Z_Construct_UEnum_PerceptionNeuron_ENeuronChannelNumberEnum());
			UProperty* NewProp_XPositionChannel = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("XPositionChannel"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(XPositionChannel, PerceptionNeuronBPLibrary_eventNeuronInit_Parms), 0x0010000000000080, Z_Construct_UEnum_PerceptionNeuron_ENeuronChannelNumberEnum());
			UProperty* NewProp_RotationOrder = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RotationOrder"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(RotationOrder, PerceptionNeuronBPLibrary_eventNeuronInit_Parms), 0x0010000000000080, Z_Construct_UEnum_PerceptionNeuron_ENeuronRotOrderEnum());
			UProperty* NewProp_BoneNumber = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BoneNumber"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(BoneNumber, PerceptionNeuronBPLibrary_eventNeuronInit_Parms), 0x0010000000000080);
			UProperty* NewProp_Controller = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Controller"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Controller, PerceptionNeuronBPLibrary_eventNeuronInit_Parms), 0x0010000000000080, Z_Construct_UClass_APerceptionNeuronController_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Perception Neuron"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_BoneNumber"), TEXT("59"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_RotationOrder"), TEXT("VE_YXZ"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_XPositionChannel"), TEXT("VE_0"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_XRotationChannel"), TEXT("VE_4"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_YPositionChannel"), TEXT("VE_1"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_YRotationChannel"), TEXT("VE_3"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_ZPositionChannel"), TEXT("VE_2"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_ZRotationChannel"), TEXT("VE_5"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Init Neuron"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/PerceptionNeuronBPLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Init BVH reference skeleton manually."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronInitFile()
	{
		struct PerceptionNeuronBPLibrary_eventNeuronInitFile_Parms
		{
			APerceptionNeuronController* Controller;
			FString BVHFileName;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPerceptionNeuronBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NeuronInitFile"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(PerceptionNeuronBPLibrary_eventNeuronInitFile_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, PerceptionNeuronBPLibrary_eventNeuronInitFile_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, PerceptionNeuronBPLibrary_eventNeuronInitFile_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, PerceptionNeuronBPLibrary_eventNeuronInitFile_Parms), sizeof(bool), true);
			UProperty* NewProp_BVHFileName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BVHFileName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(BVHFileName, PerceptionNeuronBPLibrary_eventNeuronInitFile_Parms), 0x0010000000000082);
			UProperty* NewProp_Controller = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Controller"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Controller, PerceptionNeuronBPLibrary_eventNeuronInitFile_Parms), 0x0010000000000080, Z_Construct_UClass_APerceptionNeuronController_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Perception Neuron"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_BVHFileName"), TEXT("axis.bvh"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Init Neuron File"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/PerceptionNeuronBPLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Init BVH reference skeleton with a BVH file."));
			MetaData->SetValue(NewProp_BVHFileName, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronNegateRotation()
	{
		struct PerceptionNeuronBPLibrary_eventNeuronNegateRotation_Parms
		{
			FRotator Rotation;
			FRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPerceptionNeuronBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NeuronNegateRotation"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(PerceptionNeuronBPLibrary_eventNeuronNegateRotation_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, PerceptionNeuronBPLibrary_eventNeuronNegateRotation_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_Rotation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Rotation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Rotation, PerceptionNeuronBPLibrary_eventNeuronNegateRotation_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Perception Neuron"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("Neg"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Negate Rotation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/PerceptionNeuronBPLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Negate Yaw, Pitch and Roll in rotation vector."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronPause()
	{
		struct PerceptionNeuronBPLibrary_eventNeuronPause_Parms
		{
			APerceptionNeuronController* Controller;
			bool bPause;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPerceptionNeuronBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NeuronPause"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(PerceptionNeuronBPLibrary_eventNeuronPause_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, PerceptionNeuronBPLibrary_eventNeuronPause_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, PerceptionNeuronBPLibrary_eventNeuronPause_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, PerceptionNeuronBPLibrary_eventNeuronPause_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bPause, PerceptionNeuronBPLibrary_eventNeuronPause_Parms, bool);
			UProperty* NewProp_bPause = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bPause"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bPause, PerceptionNeuronBPLibrary_eventNeuronPause_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bPause, PerceptionNeuronBPLibrary_eventNeuronPause_Parms), sizeof(bool), true);
			UProperty* NewProp_Controller = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Controller"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Controller, PerceptionNeuronBPLibrary_eventNeuronPause_Parms), 0x0010000000000080, Z_Construct_UClass_APerceptionNeuronController_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Perception Neuron"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bPause"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Pause playing BVH File"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/PerceptionNeuronBPLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Pause playing a local stored BVH file"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronPlay()
	{
		struct PerceptionNeuronBPLibrary_eventNeuronPlay_Parms
		{
			APerceptionNeuronController* Controller;
			FString BVHFileName;
			bool bEndless;
			bool bReference;
			bool bDisplacement;
			TEnumAsByte<ENeuronMotionLineFormatEnum> MotionLineFormat;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPerceptionNeuronBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NeuronPlay"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(PerceptionNeuronBPLibrary_eventNeuronPlay_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, PerceptionNeuronBPLibrary_eventNeuronPlay_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, PerceptionNeuronBPLibrary_eventNeuronPlay_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, PerceptionNeuronBPLibrary_eventNeuronPlay_Parms), sizeof(bool), true);
			UProperty* NewProp_MotionLineFormat = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MotionLineFormat"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(MotionLineFormat, PerceptionNeuronBPLibrary_eventNeuronPlay_Parms), 0x0010000000000080, Z_Construct_UEnum_PerceptionNeuron_ENeuronMotionLineFormatEnum());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDisplacement, PerceptionNeuronBPLibrary_eventNeuronPlay_Parms, bool);
			UProperty* NewProp_bDisplacement = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bDisplacement"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDisplacement, PerceptionNeuronBPLibrary_eventNeuronPlay_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bDisplacement, PerceptionNeuronBPLibrary_eventNeuronPlay_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bReference, PerceptionNeuronBPLibrary_eventNeuronPlay_Parms, bool);
			UProperty* NewProp_bReference = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bReference"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bReference, PerceptionNeuronBPLibrary_eventNeuronPlay_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bReference, PerceptionNeuronBPLibrary_eventNeuronPlay_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEndless, PerceptionNeuronBPLibrary_eventNeuronPlay_Parms, bool);
			UProperty* NewProp_bEndless = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bEndless"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEndless, PerceptionNeuronBPLibrary_eventNeuronPlay_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bEndless, PerceptionNeuronBPLibrary_eventNeuronPlay_Parms), sizeof(bool), true);
			UProperty* NewProp_BVHFileName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BVHFileName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(BVHFileName, PerceptionNeuronBPLibrary_eventNeuronPlay_Parms), 0x0010000000000080);
			UProperty* NewProp_Controller = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Controller"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Controller, PerceptionNeuronBPLibrary_eventNeuronPlay_Parms), 0x0010000000000080, Z_Construct_UClass_APerceptionNeuronController_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Perception Neuron"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bDisplacement"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bEndless"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bReference"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_BVHFileName"), TEXT("test.bvh"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_MotionLineFormat"), TEXT("VE_Standard"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Play BVH File"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/PerceptionNeuronBPLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Play a local stored BVH file."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronRead()
	{
		struct PerceptionNeuronBPLibrary_eventNeuronRead_Parms
		{
			APerceptionNeuronController* Controller;
			USkeletalMeshComponent* Mesh;
			FVector Translation;
			FRotator Rotation;
			FVector AdditionalTranslation;
			FRotator AdditionalRotation;
			TEnumAsByte<EPerceptionNeuronBonesEnum> BVHBone;
			FName CustomBoneName;
			bool InverseForward;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPerceptionNeuronBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NeuronRead"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(PerceptionNeuronBPLibrary_eventNeuronRead_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, PerceptionNeuronBPLibrary_eventNeuronRead_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, PerceptionNeuronBPLibrary_eventNeuronRead_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, PerceptionNeuronBPLibrary_eventNeuronRead_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(InverseForward, PerceptionNeuronBPLibrary_eventNeuronRead_Parms, bool);
			UProperty* NewProp_InverseForward = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InverseForward"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(InverseForward, PerceptionNeuronBPLibrary_eventNeuronRead_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(InverseForward, PerceptionNeuronBPLibrary_eventNeuronRead_Parms), sizeof(bool), true);
			UProperty* NewProp_CustomBoneName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CustomBoneName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(CustomBoneName, PerceptionNeuronBPLibrary_eventNeuronRead_Parms), 0x0010000000000080);
			UProperty* NewProp_BVHBone = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BVHBone"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(BVHBone, PerceptionNeuronBPLibrary_eventNeuronRead_Parms), 0x0010000000000080, Z_Construct_UEnum_PerceptionNeuron_EPerceptionNeuronBonesEnum());
			UProperty* NewProp_AdditionalRotation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AdditionalRotation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(AdditionalRotation, PerceptionNeuronBPLibrary_eventNeuronRead_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_AdditionalTranslation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AdditionalTranslation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(AdditionalTranslation, PerceptionNeuronBPLibrary_eventNeuronRead_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Rotation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Rotation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Rotation, PerceptionNeuronBPLibrary_eventNeuronRead_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_Translation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Translation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Translation, PerceptionNeuronBPLibrary_eventNeuronRead_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Mesh = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Mesh"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Mesh, PerceptionNeuronBPLibrary_eventNeuronRead_Parms), 0x0010000000080080, Z_Construct_UClass_USkeletalMeshComponent_NoRegister());
			UProperty* NewProp_Controller = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Controller"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Controller, PerceptionNeuronBPLibrary_eventNeuronRead_Parms), 0x0010000000000080, Z_Construct_UClass_APerceptionNeuronController_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Perception Neuron"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_BVHBone"), TEXT("VE_Hips"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_CustomBoneName"), TEXT("None"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_InverseForward"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Read Neuron Motion"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/PerceptionNeuronBPLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Read incoming motion data for all bones."));
			MetaData->SetValue(NewProp_Mesh, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronReadArray()
	{
		struct PerceptionNeuronBPLibrary_eventNeuronReadArray_Parms
		{
			APerceptionNeuronController* Controller;
			USkeletalMeshComponent* Mesh;
			TArray<FVector> Translation;
			TArray<FRotator> Rotation;
			TArray<FVector> AdditionalTranslation;
			TArray<FRotator> AdditionalRotation;
			TArray<FPerceptionNeuronBoneMapStruct> BoneMap;
			bool InverseForward;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPerceptionNeuronBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NeuronReadArray"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(PerceptionNeuronBPLibrary_eventNeuronReadArray_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, PerceptionNeuronBPLibrary_eventNeuronReadArray_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, PerceptionNeuronBPLibrary_eventNeuronReadArray_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, PerceptionNeuronBPLibrary_eventNeuronReadArray_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(InverseForward, PerceptionNeuronBPLibrary_eventNeuronReadArray_Parms, bool);
			UProperty* NewProp_InverseForward = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InverseForward"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(InverseForward, PerceptionNeuronBPLibrary_eventNeuronReadArray_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(InverseForward, PerceptionNeuronBPLibrary_eventNeuronReadArray_Parms), sizeof(bool), true);
			UProperty* NewProp_BoneMap = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BoneMap"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(BoneMap, PerceptionNeuronBPLibrary_eventNeuronReadArray_Parms), 0x0010000000000080);
			UProperty* NewProp_BoneMap_Inner = new(EC_InternalUseOnlyConstructor, NewProp_BoneMap, TEXT("BoneMap"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FPerceptionNeuronBoneMapStruct());
			UProperty* NewProp_AdditionalRotation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AdditionalRotation"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(AdditionalRotation, PerceptionNeuronBPLibrary_eventNeuronReadArray_Parms), 0x0010000000000080);
			UProperty* NewProp_AdditionalRotation_Inner = new(EC_InternalUseOnlyConstructor, NewProp_AdditionalRotation, TEXT("AdditionalRotation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_AdditionalTranslation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AdditionalTranslation"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(AdditionalTranslation, PerceptionNeuronBPLibrary_eventNeuronReadArray_Parms), 0x0010000000000080);
			UProperty* NewProp_AdditionalTranslation_Inner = new(EC_InternalUseOnlyConstructor, NewProp_AdditionalTranslation, TEXT("AdditionalTranslation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Rotation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Rotation"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Rotation, PerceptionNeuronBPLibrary_eventNeuronReadArray_Parms), 0x0010000000000180);
			UProperty* NewProp_Rotation_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Rotation, TEXT("Rotation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_Translation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Translation"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Translation, PerceptionNeuronBPLibrary_eventNeuronReadArray_Parms), 0x0010000000000180);
			UProperty* NewProp_Translation_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Translation, TEXT("Translation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Mesh = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Mesh"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Mesh, PerceptionNeuronBPLibrary_eventNeuronReadArray_Parms), 0x0010000000080080, Z_Construct_UClass_USkeletalMeshComponent_NoRegister());
			UProperty* NewProp_Controller = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Controller"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Controller, PerceptionNeuronBPLibrary_eventNeuronReadArray_Parms), 0x0010000000000080, Z_Construct_UClass_APerceptionNeuronController_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Perception Neuron"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_InverseForward"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Read Neuron Motion Array"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/PerceptionNeuronBPLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Read incoming motion data for all bones."));
			MetaData->SetValue(NewProp_Mesh, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronReadMotion()
	{
		struct PerceptionNeuronBPLibrary_eventNeuronReadMotion_Parms
		{
			APerceptionNeuronController* Controller;
			FVector Translation;
			FRotator Rotation;
			FVector AdditionalTranslation;
			FRotator AdditionalRotation;
			int32 BoneIndex;
			TEnumAsByte<ENeuronSkeletonEnum> SkeletonType;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPerceptionNeuronBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NeuronReadMotion"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(PerceptionNeuronBPLibrary_eventNeuronReadMotion_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, PerceptionNeuronBPLibrary_eventNeuronReadMotion_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, PerceptionNeuronBPLibrary_eventNeuronReadMotion_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, PerceptionNeuronBPLibrary_eventNeuronReadMotion_Parms), sizeof(bool), true);
			UProperty* NewProp_SkeletonType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SkeletonType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(SkeletonType, PerceptionNeuronBPLibrary_eventNeuronReadMotion_Parms), 0x0010000000000080, Z_Construct_UEnum_PerceptionNeuron_ENeuronSkeletonEnum());
			UProperty* NewProp_BoneIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BoneIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(BoneIndex, PerceptionNeuronBPLibrary_eventNeuronReadMotion_Parms), 0x0010000000000080);
			UProperty* NewProp_AdditionalRotation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AdditionalRotation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(AdditionalRotation, PerceptionNeuronBPLibrary_eventNeuronReadMotion_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_AdditionalTranslation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AdditionalTranslation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(AdditionalTranslation, PerceptionNeuronBPLibrary_eventNeuronReadMotion_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Rotation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Rotation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Rotation, PerceptionNeuronBPLibrary_eventNeuronReadMotion_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_Translation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Translation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Translation, PerceptionNeuronBPLibrary_eventNeuronReadMotion_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Controller = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Controller"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Controller, PerceptionNeuronBPLibrary_eventNeuronReadMotion_Parms), 0x0010000000000080, Z_Construct_UClass_APerceptionNeuronController_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Perception Neuron"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_BoneIndex"), TEXT("0"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_SkeletonType"), TEXT("VE_Neuron"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Read Neuron Motion (Deprecated)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/PerceptionNeuronBPLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Read incoming motion data for one bone (Deprecated)."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronReadMotionArray()
	{
		struct PerceptionNeuronBPLibrary_eventNeuronReadMotionArray_Parms
		{
			APerceptionNeuronController* Controller;
			TArray<FVector> Translation;
			TArray<FRotator> Rotation;
			TArray<FVector> AdditionalTranslation;
			TArray<FRotator> AdditionalRotation;
			int32 MaxBones;
			TEnumAsByte<ENeuronSkeletonEnum> SkeletonType;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPerceptionNeuronBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NeuronReadMotionArray"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(PerceptionNeuronBPLibrary_eventNeuronReadMotionArray_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, PerceptionNeuronBPLibrary_eventNeuronReadMotionArray_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, PerceptionNeuronBPLibrary_eventNeuronReadMotionArray_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, PerceptionNeuronBPLibrary_eventNeuronReadMotionArray_Parms), sizeof(bool), true);
			UProperty* NewProp_SkeletonType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SkeletonType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(SkeletonType, PerceptionNeuronBPLibrary_eventNeuronReadMotionArray_Parms), 0x0010000000000080, Z_Construct_UEnum_PerceptionNeuron_ENeuronSkeletonEnum());
			UProperty* NewProp_MaxBones = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MaxBones"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(MaxBones, PerceptionNeuronBPLibrary_eventNeuronReadMotionArray_Parms), 0x0010000000000080);
			UProperty* NewProp_AdditionalRotation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AdditionalRotation"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(AdditionalRotation, PerceptionNeuronBPLibrary_eventNeuronReadMotionArray_Parms), 0x0010000000000080);
			UProperty* NewProp_AdditionalRotation_Inner = new(EC_InternalUseOnlyConstructor, NewProp_AdditionalRotation, TEXT("AdditionalRotation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_AdditionalTranslation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AdditionalTranslation"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(AdditionalTranslation, PerceptionNeuronBPLibrary_eventNeuronReadMotionArray_Parms), 0x0010000000000080);
			UProperty* NewProp_AdditionalTranslation_Inner = new(EC_InternalUseOnlyConstructor, NewProp_AdditionalTranslation, TEXT("AdditionalTranslation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Rotation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Rotation"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Rotation, PerceptionNeuronBPLibrary_eventNeuronReadMotionArray_Parms), 0x0010000000000180);
			UProperty* NewProp_Rotation_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Rotation, TEXT("Rotation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_Translation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Translation"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Translation, PerceptionNeuronBPLibrary_eventNeuronReadMotionArray_Parms), 0x0010000000000180);
			UProperty* NewProp_Translation_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Translation, TEXT("Translation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Controller = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Controller"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Controller, PerceptionNeuronBPLibrary_eventNeuronReadMotionArray_Parms), 0x0010000000000080, Z_Construct_UClass_APerceptionNeuronController_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Perception Neuron"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_MaxBones"), TEXT("0"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_SkeletonType"), TEXT("VE_Neuron"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Read Neuron Motion Array (Deprecated)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/PerceptionNeuronBPLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Read incoming motion data for all bones."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronRewind()
	{
		struct PerceptionNeuronBPLibrary_eventNeuronRewind_Parms
		{
			APerceptionNeuronController* Controller;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPerceptionNeuronBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NeuronRewind"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(PerceptionNeuronBPLibrary_eventNeuronRewind_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, PerceptionNeuronBPLibrary_eventNeuronRewind_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, PerceptionNeuronBPLibrary_eventNeuronRewind_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, PerceptionNeuronBPLibrary_eventNeuronRewind_Parms), sizeof(bool), true);
			UProperty* NewProp_Controller = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Controller"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Controller, PerceptionNeuronBPLibrary_eventNeuronRewind_Parms), 0x0010000000000080, Z_Construct_UClass_APerceptionNeuronController_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Perception Neuron"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Rewind BVH File Player"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/PerceptionNeuronBPLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Rewind BVH file player."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UPerceptionNeuronBPLibrary_NoRegister()
	{
		return UPerceptionNeuronBPLibrary::StaticClass();
	}
	UClass* Z_Construct_UClass_UPerceptionNeuronBPLibrary()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlueprintFunctionLibrary();
			Z_Construct_UPackage__Script_PerceptionNeuron();
			OuterClass = UPerceptionNeuronBPLibrary::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;

				OuterClass->LinkChild(Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronBoneMap());
				OuterClass->LinkChild(Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronBoneSetOffset());
				OuterClass->LinkChild(Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronConnect());
				OuterClass->LinkChild(Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronDisconnect());
				OuterClass->LinkChild(Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronGetBVHBoneIndex());
				OuterClass->LinkChild(Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronGetLocalBoneLocation());
				OuterClass->LinkChild(Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronGetLocalBoneRotation());
				OuterClass->LinkChild(Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronGetReferencePoseLocalBoneRotation());
				OuterClass->LinkChild(Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronInit());
				OuterClass->LinkChild(Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronInitFile());
				OuterClass->LinkChild(Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronNegateRotation());
				OuterClass->LinkChild(Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronPause());
				OuterClass->LinkChild(Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronPlay());
				OuterClass->LinkChild(Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronRead());
				OuterClass->LinkChild(Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronReadArray());
				OuterClass->LinkChild(Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronReadMotion());
				OuterClass->LinkChild(Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronReadMotionArray());
				OuterClass->LinkChild(Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronRewind());

				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronBoneMap(), "NeuronBoneMap"); // 806569127
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronBoneSetOffset(), "NeuronBoneSetOffset"); // 3633387618
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronConnect(), "NeuronConnect"); // 2495870596
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronDisconnect(), "NeuronDisconnect"); // 1139477067
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronGetBVHBoneIndex(), "NeuronGetBVHBoneIndex"); // 3273769455
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronGetLocalBoneLocation(), "NeuronGetLocalBoneLocation"); // 488793646
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronGetLocalBoneRotation(), "NeuronGetLocalBoneRotation"); // 1329671183
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronGetReferencePoseLocalBoneRotation(), "NeuronGetReferencePoseLocalBoneRotation"); // 4035969667
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronInit(), "NeuronInit"); // 613893858
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronInitFile(), "NeuronInitFile"); // 3454477645
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronNegateRotation(), "NeuronNegateRotation"); // 266601386
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronPause(), "NeuronPause"); // 2004297089
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronPlay(), "NeuronPlay"); // 543950363
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronRead(), "NeuronRead"); // 3804924730
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronReadArray(), "NeuronReadArray"); // 878687855
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronReadMotion(), "NeuronReadMotion"); // 1625298022
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronReadMotionArray(), "NeuronReadMotionArray"); // 1993876184
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPerceptionNeuronBPLibrary_NeuronRewind(), "NeuronRewind"); // 2055476062
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("PerceptionNeuronBPLibrary.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/PerceptionNeuronBPLibrary.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UPerceptionNeuronBPLibrary(Z_Construct_UClass_UPerceptionNeuronBPLibrary, &UPerceptionNeuronBPLibrary::StaticClass, TEXT("UPerceptionNeuronBPLibrary"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UPerceptionNeuronBPLibrary);
	UPackage* Z_Construct_UPackage__Script_PerceptionNeuron()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/PerceptionNeuron")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000000);
			FGuid Guid;
			Guid.A = 0xA8DC2E9F;
			Guid.B = 0x7DC9142F;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
